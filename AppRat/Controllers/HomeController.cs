using AppRat.Data;
using AppRat.Models;
using AppRat.ViewModels;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System.Diagnostics;

namespace AppRat.Controllers
{
    [Authorize]
    public class HomeController : Controller
    {
        private readonly ILogger<HomeController> _logger;
        private readonly AppRatDbContext _context;
        private readonly UserManager<IdentityUser> _userManager;

        DateTime currentDate = DateTime.Now;

        public HomeController(ILogger<HomeController> logger, AppRatDbContext context, UserManager<IdentityUser> userManager)
        {
            _logger = logger;
            _context = context;
            _userManager = userManager;
        }

        public IActionResult Index()
        {
            return RedirectToPage("/Account/Login", new { area = "Identity" });
        }

        public async Task<IActionResult> Dashboard()
        {
            AR_DashboardViewModel viewModel = new AR_DashboardViewModel();

            return View(viewModel);
        }

        [HttpPost]
        public async Task<IActionResult> DashboardContent(string? monthYear, int? SalesPeople, int? Results_Id, int? Condition_Id, int? Insurance_Id, int? Remarks_Id, string? bValidated, string? bInvoiced, string? bSigned)
        {
            IdentityUser? user = await _userManager.GetUserAsync(User);
            ARR_DealerLink? DealerLink = await _context.ARR_DealerLink.FirstOrDefaultAsync(o => o.UserId == user.Id);
            var userRole = await _userManager.GetRolesAsync(user);
            bool isDeveloperOrAdmin = userRole.Contains("Developer") || userRole.Contains("Admin");
            IQueryable<AR_Application> baseQuery;

            int month = 0;
            int year = 0;

			Results_Id ??= 0;
            Condition_Id ??= 0;
            Insurance_Id ??= 0;
			Remarks_Id ??= 0;
            SalesPeople ??= 0;     

            if (!string.IsNullOrWhiteSpace(monthYear))
            {
                // Split the "monthYear" string into "month" and "year" components
                var parts = monthYear.Split('-');
                if (parts.Length == 2 && int.TryParse(parts[0], out year) && int.TryParse(parts[1], out month))
                {
                    // Now you have "year" and "month" as integers
                    // Your action logic here
                }
                else
                {
                    // Handle invalid input
                }
            }
            else
            {
                // If monthYear is null or empty, set defaults to the current month and year
                DateTime currentDates = DateTime.Now;
                month = currentDates.Month;
                year = currentDates.Year;
            }
            //
            ///---------------------------------------------------------------------------------------------------------------------------------------\\\
            ///--- Targets Section Part1 Start																									   ---\\\
            ///---------------------------------------------------------------------------------------------------------------------------------------\\\ 
            // For the targets, add filters for the selected month and year

            var currentMonthTarget = await _context.AR_Target
                .Where(o => o.DealerId == DealerLink.DealerId &&
                            o.Date.Month == month &&
                            o.Date.Year == year)
                .FirstOrDefaultAsync();

            if (currentMonthTarget == null)
            {
                // If there is no target for the current month, create a copy of the target from the previous month
                var previousMonth = currentDate.AddMonths(-1);

                var previousMonthTarget = await _context.AR_Target
                    .Where(o => o.DealerId == DealerLink.DealerId &&
                                o.Date.Month == previousMonth.Month &&
                                o.Date.Year == previousMonth.Year)
                    .FirstOrDefaultAsync();

                if (previousMonthTarget != null)
                {
                    DateTime lastDayOfMonth = new DateTime(currentDate.Year, currentDate.Month, 1).AddMonths(1).AddDays(-1);
                    // Create a new target for the current month based on the previous month's target
                    currentMonthTarget = new AR_Target
                    {
                        //UserId = previousMonthTarget.UserId,
                        UserId = "AutoGeneratedTarget",
                        DealerId = previousMonthTarget.DealerId,
                        New = previousMonthTarget.New,
                        Used = previousMonthTarget.Used,
                        Date = lastDayOfMonth
                    };

                    // Add the new target to the context and save changes
                    _context.AR_Target.Add(currentMonthTarget);
                    await _context.SaveChangesAsync();
                }
            }

            var targets = await _context.AR_Target
                .Where(o => o.DealerId == DealerLink.DealerId &&
                            o.Date.Month == month &&  // Filter by the selected month
                            o.Date.Year == year)      // Filter by the selected year
                .Select(o => new AR_DashboardContentViewModel.AR_Target
                {
                    Id = o.Id,
                    UserId = o.UserId,
                    DealerId = o.DealerId,
                    New = o.New,
                    Used = o.Used,
                    Date = o.Date
                })
                .ToListAsync();

            int targetNew = targets.FirstOrDefault()?.New ?? 10;
            int targetUsed = targets.FirstOrDefault()?.Used ?? 10;
            ///---------------------------------------------------------------------------------------------------------------------------------------\\\
            ///--- Target Section Part1 End																										   ---\\\
            ///---------------------------------------------------------------------------------------------------------------------------------------\\\

            ///---------------------------------------------------------------------------------------------------------------------------------------\\\
            ///--- Working Days Section Start																									   ---\\\
            ///---------------------------------------------------------------------------------------------------------------------------------------\\\
            DateTime targetMonth = targets.Select(target => target.Date.Date).Distinct().FirstOrDefault();
            //DateTime currentDate = DateTime.Now;
            int workingDaysInMonth = 0;
            int workingDaysUpToToday = 0;


            int daysInMonth = DateTime.DaysInMonth(targetMonth.Year, targetMonth.Month);
            for (int day = 1; day <= daysInMonth; day++)
            {
                DateTime currentDay = new DateTime(targetMonth.Year, targetMonth.Month, day);
                if (currentDay.DayOfWeek != DayOfWeek.Saturday && currentDay.DayOfWeek != DayOfWeek.Sunday)
                {
                    workingDaysInMonth++;
                    if (currentDay <= currentDate)
                    {
                        workingDaysUpToToday++;
                    }
                }
            }
            float workingDaysPercentage = (float)Math.Round(((float)workingDaysUpToToday / workingDaysInMonth) * 100, 0);
            ///---------------------------------------------------------------------------------------------------------------------------------------\\\
            ///--- Working Days Section End																										   ---\\\
            ///---------------------------------------------------------------------------------------------------------------------------------------\\\
            ///---------------------------------------------------------------------------------------------------------------------------------------\\\
            ///--- baseQuery and Filters Section Start																							   ---\\\
            ///---------------------------------------------------------------------------------------------------------------------------------------\\\ 

            // Create a base query without the Result_Id filter
            //var baseQuery = _context.AR_Applications
            //    .Where(app => app.DealerId == DealerLink.DealerId
            //        && app.Date.Year == targetMonth.Year
            //        && app.Date.Month == targetMonth.Month);
            
            if (isDeveloperOrAdmin)
            {
                baseQuery = _context.AR_Applications
                    .Where(app => app.Date.Year == targetMonth.Year
                        && app.Date.Month == targetMonth.Month);
            }
            else if (DealerLink?.DealerId != null)
            {
                baseQuery = _context.AR_Applications
                    .Where(app => app.DealerId == DealerLink.DealerId
                        && app.Date.Year == targetMonth.Year
                        && app.Date.Month == targetMonth.Month);
            }
            else
            {
                // Handle the case where DealerLink is null if necessary
                baseQuery = Enumerable.Empty<AR_Application>().AsQueryable();
            }

            // Conditionally apply the Result_Id filter
            if (Results_Id != 0 && Results_Id != 1)
            {
                baseQuery = baseQuery.Where(app => app.Results_Id == Results_Id);
            }

            // Conditionally apply the Condition_Id filter
            if (Condition_Id != 0 && Condition_Id != 1)
            {
                baseQuery = baseQuery.Where(app => app.Condition_Id == Condition_Id);
            }

            // Conditionally apply the Insurance_Id filter
            if (Insurance_Id != 0 && Insurance_Id != 1)
            {
                baseQuery = baseQuery.Where(app => app.Insurance_Id == Insurance_Id);
            }

            // Conditionally apply the Remarks_Id filter
            if (Remarks_Id != 0 && Remarks_Id != 1)
            {
                baseQuery = baseQuery.Where(app => app.Remarks_Id == Remarks_Id);
            }

            // Conditionally apply the SalesPeople filter
            if (SalesPeople != 0 && SalesPeople != 1)
            {
                baseQuery = baseQuery.Where(app => app.SalesPeople == SalesPeople);
            }

            // Apply boolean filters
            if (bValidated == "on")
            {
                baseQuery = baseQuery.Where(app => app.Validated == true);
            }
            if (bInvoiced == "on")
            {
                baseQuery = baseQuery.Where(app => app.Invoiced == true);
            }
            if (bSigned == "on")
            {
                baseQuery = baseQuery.Where(app => app.Signed == true);
            }
            ///---------------------------------------------------------------------------------------------------------------------------------------\\\
            ///--- baseQuery and Filters Section Start Section End																				   ---\\\
            ///---------------------------------------------------------------------------------------------------------------------------------------\\\
            ///---------------------------------------------------------------------------------------------------------------------------------------\\\
            ///--- New Cars Section Start																										   ---\\\
            ///---------------------------------------------------------------------------------------------------------------------------------------\\\ 
            int newCarsAppsCount = 0;
            newCarsAppsCount = await baseQuery
                .Where(app => app.Condition_Id == 2)
                .CountAsync();

            int newCarsValidatedCount = 0;
            newCarsValidatedCount = await baseQuery
                .Where(app => app.Condition_Id == 2 && app.Validated == true)
                .CountAsync();

            int newCarsTakenUpCount = 0;
            newCarsTakenUpCount = await baseQuery
                .Where(app => app.Condition_Id == 2 && app.Signed == true)
                .CountAsync();

            int newCarsNTUCount = 0;
            newCarsNTUCount = await baseQuery
                .Where(app => app.Condition_Id == 2 && app.Signed == false && app.Validated == true)
                .CountAsync();
            ///---------------------------------------------------------------------------------------------------------------------------------------\\\
            ///--- New Cars Section End																											   ---\\\
            ///---------------------------------------------------------------------------------------------------------------------------------------\\\

            ///---------------------------------------------------------------------------------------------------------------------------------------\\\
            ///--- Used Cars Section Start																										   ---\\\
            ///---------------------------------------------------------------------------------------------------------------------------------------\\\ 
            int usedCarsAppsCount = 0;
            usedCarsAppsCount = await baseQuery
                .Where(app => app.Condition_Id == 3)
                .CountAsync();

            int usedCarsDemoAppsCount = 0;
            usedCarsDemoAppsCount = await baseQuery
                .Where(app => app.Condition_Id == 4)
                .CountAsync();

            int usedCarsValidatedCount = 0;
            usedCarsValidatedCount = await baseQuery
                .Where(app => (app.Condition_Id == 3 || app.Condition_Id == 4) && app.Validated == true)
                .CountAsync();

            int usedCarsTakenUpCount = 0;
            usedCarsTakenUpCount = await baseQuery
                .Where(app => (app.Condition_Id == 3 || app.Condition_Id == 4) && app.Signed == true)
                .CountAsync();

            int usedCarsNTUCount = 0;
            usedCarsNTUCount = await baseQuery
                .Where(app => (app.Condition_Id == 3 || app.Condition_Id == 4) && app.Signed == false && app.Validated == true)
                .CountAsync();
            ///---------------------------------------------------------------------------------------------------------------------------------------\\\
            ///--- Used Cars Section End																										   ---\\\
            ///---------------------------------------------------------------------------------------------------------------------------------------\\\

            ///---------------------------------------------------------------------------------------------------------------------------------------\\\
            ///--- Targets Section Part2 Start																									   ---\\\
            ///---------------------------------------------------------------------------------------------------------------------------------------\\\ 
            float projectedNewCount = (float)newCarsTakenUpCount / (float)workingDaysUpToToday * (float)workingDaysInMonth;
            float ProjectedUsedCount = ((float)(usedCarsValidatedCount) / (float)workingDaysUpToToday) * (float)workingDaysInMonth;
            //float projectedTotalCount = projectedNewCount + ProjectedUsedCount;
            float projectedTotalCount = (float)Math.Round((((float)newCarsTakenUpCount + (float)usedCarsTakenUpCount) / (float)workingDaysUpToToday) * (float)workingDaysInMonth, 2);

            //Round the results to two decimal points
            projectedNewCount = (float)Math.Round(projectedNewCount, 2);
            ProjectedUsedCount = (float)Math.Round(ProjectedUsedCount, 2);
            projectedTotalCount = (float)Math.Round(projectedTotalCount, 2);

            float dailyAppsRequiredNewCount = 0;

            if (newCarsTakenUpCount != 0 && workingDaysInMonth - workingDaysUpToToday != 0)
            {
                float targetNewFloat = Convert.ToSingle(targetNew);
                float newCarsTakenUpCountFloat = Convert.ToSingle(newCarsTakenUpCount);
                float newCarsAppsCountFloat = Convert.ToSingle(newCarsAppsCount);
                float workingDaysInMonthFloat = Convert.ToSingle(workingDaysInMonth);
                float workingDaysUpToTodayFloat = Convert.ToSingle(workingDaysUpToToday);

                
                if(dailyAppsRequiredNewCount !> targetNew)
                {
                    dailyAppsRequiredNewCount = (float)Math.Round(((targetNewFloat - newCarsTakenUpCountFloat) * (newCarsAppsCountFloat / newCarsTakenUpCountFloat)) / (workingDaysInMonthFloat - workingDaysUpToTodayFloat), 2);
                }
                else
                {
                    dailyAppsRequiredNewCount = targetNew - newCarsTakenUpCount;
                }
            }
            else
            {
                dailyAppsRequiredNewCount = 0.00f; // Set a default value with two decimal points
                                                   // Or, throw an exception or log an error message depending on your application's requirements.
            }


            float dailyAppsRequiredUsedCount = 0;

            if (!(ProjectedUsedCount > targetUsed) && usedCarsTakenUpCount != 0 && workingDaysInMonth - workingDaysUpToToday != 0)
            {
                float targetUsedFloat = Convert.ToSingle(targetUsed);
                float usedCarsTakenUpCountFloat = Convert.ToSingle(usedCarsTakenUpCount);
                float usedCarsAppsCountFloat = Convert.ToSingle(usedCarsAppsCount);
                float workingDaysInMonthFloat = Convert.ToSingle(workingDaysInMonth);
                float workingDaysUpToTodayFloat = Convert.ToSingle(workingDaysUpToToday);

                
                if (dailyAppsRequiredUsedCount! > targetUsed)
                {
                    dailyAppsRequiredUsedCount = (float)Math.Round(((targetUsedFloat - usedCarsTakenUpCountFloat) * ((usedCarsAppsCountFloat + usedCarsDemoAppsCount) / usedCarsTakenUpCountFloat)) / (workingDaysInMonthFloat - workingDaysUpToTodayFloat), 2);
                }
                else
                {
                    dailyAppsRequiredUsedCount = targetUsed - usedCarsTakenUpCount;
                }
            }
            else
            {
                dailyAppsRequiredUsedCount = 0.0f; // Set a default value with two decimal points
                                                   // Or, throw an exception or log an error message depending on your application's requirements.
            }


            float dailyAppsRequiredTotalCount = (float)Math.Round((dailyAppsRequiredNewCount + dailyAppsRequiredUsedCount),2);
            ///---------------------------------------------------------------------------------------------------------------------------------------\\\
            ///--- Target Section Part2 End																										   ---\\\
            ///---------------------------------------------------------------------------------------------------------------------------------------\\\

            ///---------------------------------------------------------------------------------------------------------------------------------------\\\
            ///--- Ratio Section Part1 Start																									   ---\\\
            ///---------------------------------------------------------------------------------------------------------------------------------------\\\ 
            int approvedTotalCount = 0;
            approvedTotalCount = await baseQuery
                .Where(app => app.Results_Id == 2)
                .CountAsync();

            int declinedTotalCount = 0;
            declinedTotalCount = await baseQuery
                .Where(app => app.Results_Id == 3)
                .CountAsync();

            int selfFinanceTotalCount = 0;
            selfFinanceTotalCount = await baseQuery
                .Where(app => app.Results_Id == 7)
                .CountAsync();

            int cashTotalCount = 0;
            cashTotalCount = await baseQuery
                .Where(app => app.Results_Id == 5)
                .CountAsync();
            ///---------------------------------------------------------------------------------------------------------------------------------------\\\
            ///--- Ratio Section Part1 End																										   ---\\\
            ///---------------------------------------------------------------------------------------------------------------------------------------\\\

            ///---------------------------------------------------------------------------------------------------------------------------------------\\\
            ///--- App Values Section Start																										   ---\\\
            ///---------------------------------------------------------------------------------------------------------------------------------------\\\ 
            int totalAppsCount = newCarsAppsCount + usedCarsAppsCount + usedCarsDemoAppsCount;
            float appsPerDayCount = totalAppsCount / workingDaysUpToToday;
            int unitsSoldCount = newCarsTakenUpCount + usedCarsTakenUpCount;
            //float appsPerDealCount = totalAppsCount / unitsSoldCount;
            float appsPerDealCount = 0;
            if (unitsSoldCount != 0)
            {
                appsPerDealCount = (float)totalAppsCount / (float)unitsSoldCount;
            }
            else
            {
                // Handle the case where unitsSoldCount is zero.
                // You can set a default value, throw an exception, or log an error message as needed.
                // For example:
                appsPerDealCount = 0; // Set a default value
                                            // Or, throw an exception or log an error message depending on your application's requirements.
            }
            //float totalProjectedCount = (unitsSoldCount / workingDaysUpToToday) * workingDaysInMonth;

            int validatedAppsCount = 0;
            validatedAppsCount = await baseQuery
                .Where(app => app.Validated == true)
                .CountAsync();

            int totalApps2Count = approvedTotalCount + declinedTotalCount + selfFinanceTotalCount + cashTotalCount;
            float validatedAppsRatio = (float)Math.Round((((float)validatedAppsCount / totalApps2Count)*100), 2);

            int appsTakenUpCount = 0;
            appsTakenUpCount = await baseQuery
                .Where(app => app.Signed == true)
                .CountAsync();
            ///---------------------------------------------------------------------------------------------------------------------------------------\\\
            ///--- App Values Section End																										   ---\\\
            ///---------------------------------------------------------------------------------------------------------------------------------------\\\

            ///---------------------------------------------------------------------------------------------------------------------------------------\\\
            ///--- Ratio Section Part2 Start																									   ---\\\
            ///---------------------------------------------------------------------------------------------------------------------------------------\\\ 
            float approvedRatio = (float)Math.Round(((float)approvedTotalCount / totalApps2Count) * 100, 2);
            float declinedRatio = (float)Math.Round(((float)declinedTotalCount / totalApps2Count) * 100, 2);
            float selfFinanceRatio = (float)Math.Round(((float)selfFinanceTotalCount / totalApps2Count) * 100, 2);
            float cashRatio = (float)Math.Round(((float)cashTotalCount / totalApps2Count) * 100, 2);
            ///---------------------------------------------------------------------------------------------------------------------------------------\\\
            ///--- Ratio Section Part2 End																										   ---\\\
            ///---------------------------------------------------------------------------------------------------------------------------------------\\\

            ///---------------------------------------------------------------------------------------------------------------------------------------\\\
            ///--- NTU Section Start																											   ---\\\
            ///---------------------------------------------------------------------------------------------------------------------------------------\\\ 
            int totalSoldCount = newCarsTakenUpCount + usedCarsTakenUpCount;
            int totalNTUCount = newCarsNTUCount + usedCarsNTUCount;

            int totalSpotterDeals = await baseQuery
                .Where(app => app.Spotter == true)
                .CountAsync();

            int validatedSpotterDealsCount = await baseQuery
                .Where(app => app.Spotter == true && app.Validated == true)
                .CountAsync();

            int spotterDealsNTUCount = await baseQuery
                .Where(app => app.Spotter == true && app.Signed == false && app.Validated == true)//TODO: this is probably wrong
                .CountAsync();

            //float spotterDealsNTURatio = spotterDealsNTUCount / validatedSpotterDealsCount;
            float spotterDealsNTURatio = 0;
            if (validatedSpotterDealsCount != 0)
            {
                spotterDealsNTURatio = spotterDealsNTUCount / validatedSpotterDealsCount;
            }
            else
            {
                // Handle the case where validatedSpotterDealsCount is zero.
                // You can set a default value, throw an exception, or log an error message as needed.
                // For example:
                spotterDealsNTURatio = 0; // Set a default value
                                                // Or, throw an exception or log an error message depending on your application's requirements.
            }
            float nTURatio = (float)totalNTUCount / (newCarsValidatedCount + usedCarsValidatedCount);
            ///---------------------------------------------------------------------------------------------------------------------------------------\\\
            ///--- NTU Section End																												   ---\\\
            ///---------------------------------------------------------------------------------------------------------------------------------------\\\

            ///---------------------------------------------------------------------------------------------------------------------------------------\\\
            ///--- ViewModel Start																												   ---\\\
            ///---------------------------------------------------------------------------------------------------------------------------------------\\\ 
            var viewModel = new AR_DashboardContentViewModel
            {
                //Working Days
                WorkingDaysPassed = workingDaysUpToToday,
                WorkingDaysTotal = workingDaysInMonth,
                WorkingDaysPercetage = workingDaysPercentage,
                // Targets
                TargetTotal = targets.Sum(t => t.Used + t.New),
                ProjectedNew = projectedNewCount,
                ProjectedUsed = ProjectedUsedCount,
                ProjectedTotal = projectedTotalCount,

                // Daily Apps Required
                DailyAppsRequiredNew = (newCarsTakenUpCount != 0) ? dailyAppsRequiredNewCount : 0,
                DailyAppsRequiredUsed = (usedCarsTakenUpCount != 0) ? dailyAppsRequiredUsedCount : 0,
                DailyAppsRequiredTotal = (newCarsTakenUpCount != 0) ? dailyAppsRequiredTotalCount : 0,

                AR_Targets = targets,
                //
                totalCarApps = newCarsAppsCount + usedCarsAppsCount + usedCarsDemoAppsCount,
                //New Cars
                NewCarsApps = newCarsAppsCount,
                NewCarsValidated = newCarsValidatedCount,
                NewCarsTakenUp = newCarsTakenUpCount,
                NewCarsNTU = newCarsNTUCount,
                NewCarsAppsPerDeal = (newCarsTakenUpCount != 0) ? (float)Math.Round(((float)newCarsAppsCount / (float)newCarsTakenUpCount),2) : 0,
                //Used Cars
                UsedCarsApps = usedCarsAppsCount,
                UsedCarsDemoApps = usedCarsDemoAppsCount,
                UsedCarsValidated = usedCarsValidatedCount,
                UsedCarsTakenUp = usedCarsTakenUpCount,
                UsedCarsNTU = usedCarsNTUCount,
                UsedCarsAppsPerDeal = (newCarsTakenUpCount != 0) ? (float)Math.Round(((((float)usedCarsAppsCount + (float)usedCarsDemoAppsCount)) / (float)usedCarsTakenUpCount), 2) : 0,
                //App Values
                TotalApps = totalAppsCount,
                //AppsPerDay = appsPerDayCount,
                AppsPerDay = (float)Math.Round(((float)totalAppsCount / (float)workingDaysUpToToday),2),
                UnitsSold = unitsSoldCount,
                AppsPerDeal = (float)Math.Round((appsPerDealCount),2),
                //TotalProjected = totalProjectedCount,
                ValidatedApps = validatedAppsCount,
                TotalApps2 = totalApps2Count,
                ValidatedAppsRatio = validatedAppsRatio,
                AppsTakenUp = appsTakenUpCount,
                //Ratio
                ApprovedTotal = approvedTotalCount,
                DeclinedTotal = declinedTotalCount,
                SelfFinanceTotal = selfFinanceTotalCount,
                CashTotal = cashTotalCount,
                ApprovedRatio = approvedRatio,
                DeclinedRatio = declinedRatio,
                SelfFinanceRatio = selfFinanceRatio,
                CashRatio = cashRatio,
                //NTU
                TotalSold = totalSoldCount,
                TotalNTU = totalNTUCount,
                TotalSpotterDeals = totalSpotterDeals,
                ValidatedSpotterDeals = validatedSpotterDealsCount,
                SpotterDealsNTU = spotterDealsNTUCount,
                SpotterDealsNTURatio = (validatedSpotterDealsCount != 0) ? (spotterDealsNTUCount / validatedSpotterDealsCount) : 0,
                NTURatio = (float)Math.Round(((float)nTURatio*100),2),
            };
            ///---------------------------------------------------------------------------------------------------------------------------------------\\\
            ///--- ViewModel End																												   ---\\\
            ///---------------------------------------------------------------------------------------------------------------------------------------\\\

            ///---------------------------------------------------------------------------------------------------------------------------------------\\\
            ///--- Chart vars Start																												   ---\\\
            ///---------------------------------------------------------------------------------------------------------------------------------------\\\
            List<AR_Application> resultData = baseQuery.ToList();
            currentDate = DateTime.Now;
            daysInMonth = DateTime.DaysInMonth(currentDate.Year, currentDate.Month);
            List<DateTime> dateRange = new List<DateTime>();

            //for (int day = 1; day <= daysInMonth; day++)
            //{
            //    DateTime date = new DateTime(currentDate.Year, currentDate.Month, day);
            //    dateRange.Add(date);
            //}

            if (resultData.Count > 0)
            {
                DateTime startDate = resultData.Min(app => app.Date);
                DateTime endDate = resultData.Max(app => app.Date);

                for (DateTime date = startDate; date <= endDate; date = date.AddDays(1))
                {
                    dateRange.Add(date);
                }
            }
            else
            {
                Console.WriteLine("No data in the result.");
            }

            var categories = dateRange;

            var dailyUsed = await GetTotalUsedData(dateRange, resultData);
            var dailyNew = await GetTotalNewData(dateRange, resultData);
            var dailyDemo = await GetTotalDemoData(dateRange, resultData);
            var dailyNtu = await GetTotalNtuData(dateRange, resultData);

            var dailyApproved = await GetDailyApprovedInDateRange(dateRange, resultData);
            var dailyDeclined = await GetDailyDeclinedInDateRange(dateRange, resultData);
            var dailySelfFinanced = await GetDailySelfFinanceInDateRange(dateRange, resultData);
            var dailyCash = await GetDailyCashInDateRange(dateRange, resultData);

            ViewBag.categories = categories;

            ViewBag.dailyUsed = dailyUsed;
            ViewBag.dailyNew = dailyNew;
            ViewBag.dailyDemo = dailyDemo;
            ViewBag.dailyNtu = dailyNtu;

            ViewBag.dailyApproved = dailyApproved;
            ViewBag.dailyDeclined = dailyDeclined;
            ViewBag.dailySelfFinanced = dailySelfFinanced;
            ViewBag.dailyCash = dailyCash;

            ViewBag.totalNewCarApps = newCarsAppsCount;
            ViewBag.totalNewCarValidatedApps = newCarsValidatedCount;
            ViewBag.totalNewCarSold = newCarsTakenUpCount;
            ViewBag.totalNewCarNtu = newCarsNTUCount;
            //ViewBag.totalNewCarAppsPerDeal = (usedCarsAppsCount + usedCarsDemoAppsCount) / newCarsTakenUpCount;
            if (newCarsTakenUpCount != 0)
            {
                ViewBag.totalNewCarAppsPerDeal = (usedCarsAppsCount + usedCarsDemoAppsCount) / newCarsTakenUpCount;
            }
            else
            {
                // Handle the case where newCarsTakenUpCount is zero.
                // You can set a default value, throw an exception, or handle it as needed for your application.
                // For example:
                ViewBag.totalNewCarAppsPerDeal = 0; // Set a default value
                                                    // Or, throw an exception or perform custom error handling based on your requirements.
            }

            ViewBag.totalUsedCarApps = usedCarsAppsCount;
            ViewBag.totalDemoCarApps = usedCarsDemoAppsCount;
            ViewBag.totalUsedCarValidatedApps = usedCarsValidatedCount;
            ViewBag.totalUsedCarSold = usedCarsTakenUpCount;
            ViewBag.totalUsedCarNtu = usedCarsNTUCount;
            //ViewBag.totalUsedCarAppsPerDeal = (usedCarsAppsCount + usedCarsDemoAppsCount) / newCarsTakenUpCount;
            if (newCarsTakenUpCount != 0)
            {
                ViewBag.totalUsedCarAppsPerDeal = (usedCarsAppsCount + usedCarsDemoAppsCount) / newCarsTakenUpCount;
            }
            else
            {
                // Handle the case where newCarsTakenUpCount is zero.
                // You can set a default value, throw an exception, or handle it as needed for your application.
                // For example:
                ViewBag.totalUsedCarAppsPerDeal = 0; // Set a default value
                                                     // Or, throw an exception or perform custom error handling based on your requirements.
            }

            ViewBag.selectedResults_Id = Results_Id;
            ///---------------------------------------------------------------------------------------------------------------------------------------\\\
            ///--- Chart Vars End																												   ---\\\
            ///---------------------------------------------------------------------------------------------------------------------------------------\\\

            return PartialView("_DashboardContentPartial", viewModel);
        }

        ///---------------------------------------------------------------------------------------------------------------------------------------\\\
        ///--- Dynamic start and end date																									---\\\
        ///---------------------------------------------------------------------------------------------------------------------------------------\\\

        ///---------------------------------------------------------------------------------------------------------------------------------------\\\
        ///--- Dynamic Applications Ratio's																									---\\\
        ///---------------------------------------------------------------------------------------------------------------------------------------\\\

        private async Task<List<int>> GetDailyApprovedInDateRange(List<DateTime> dateRange, List<AR_Application> resultData)
        {
            List<int> dailyApproved = new List<int>();

            foreach (DateTime date in dateRange)
            {
                var used_context = resultData
                    .Where(app => app.Date.Year == date.Year &&
                                  app.Date.Month == date.Month &&
                                  app.Date.Day == date.Day &&
                                  app.Results_Id == 2)
                    .Count();

                dailyApproved.Add(used_context);
            }

            return dailyApproved;
        }

        private async Task<List<int>> GetDailyDeclinedInDateRange(List<DateTime> dateRange, List<AR_Application> resultData)
        {
            List<int> dailyDeclined = new List<int>();

            foreach (DateTime date in dateRange)
            {
                var used_context = resultData
                    .Where(app => app.Date.Year == date.Year &&
                                  app.Date.Month == date.Month &&
                                  app.Date.Day == date.Day &&
                                  app.Results_Id == 3)
                    .Count();

                dailyDeclined.Add(used_context);
            }

            return dailyDeclined;
        }

        private async Task<List<int>> GetDailySelfFinanceInDateRange(List<DateTime> dateRange, List<AR_Application> resultData)
        {
            List<int> dailySelfFinanced = new List<int>();

            foreach (DateTime date in dateRange)
            {
                var used_context = resultData
                    .Where(app => app.Date.Year == date.Year &&
                                  app.Date.Month == date.Month &&
                                  app.Date.Day == date.Day &&
                                  app.Results_Id == 7)
                    .Count();

                dailySelfFinanced.Add(used_context);
            }

            return dailySelfFinanced;
        }

        private async Task<List<int>> GetDailyCashInDateRange(List<DateTime> dateRange, List<AR_Application> resultData)
        {
            List<int> dailyCash = new List<int>();

            foreach (DateTime date in dateRange)
            {
                var used_context = resultData
                    .Where(app => app.Date.Year == date.Year &&
                                  app.Date.Month == date.Month &&
                                  app.Date.Day == date.Day &&
                                  app.Results_Id == 5)
                    .Count();

                dailyCash.Add(used_context);
            }

            return dailyCash;
        }

        ///---------------------------------------------------------------------------------------------------------------------------------------\\\
        ///--- Dynamic Applications Ratio's END																									---\\\
        ///---------------------------------------------------------------------------------------------------------------------------------------\\\

        ///---------------------------------------------------------------------------------------------------------------------------------------\\\
        ///--- Daily Applications and NTU as per date range																						---\\\
        ///---------------------------------------------------------------------------------------------------------------------------------------\\\
        // Define functions to generate data dynamically
        private async Task<List<int>> GetTotalUsedData(List<DateTime> dateRange, List<AR_Application> resultData)
        {
            List<int> dailyUsedData = new List<int>();

            foreach (DateTime date in dateRange)
            {
                var used_context = resultData
                    .Where(app => app.Date.Year == date.Year &&
                                  app.Date.Month == date.Month &&
                                  app.Date.Day == date.Day &&
                                  app.Condition_Id == 3)
                    .Count();

                dailyUsedData.Add(used_context);
            }

            return dailyUsedData;
        }

        private async Task<List<int>> GetTotalNewData(List<DateTime> dateRange, List<AR_Application> resultData)
        {

            List<int> dailyNewData = new List<int>();

            foreach (DateTime date in dateRange)
            {
                var used_context = resultData
                    .Where(app => app.Date.Year == date.Year &&
                                  app.Date.Month == date.Month &&
                                  app.Date.Day == date.Day &&
                                  app.Condition_Id == 2)
                    .Count();

                dailyNewData.Add(used_context);
            }

            return dailyNewData;
        }

        private async Task<List<int>> GetTotalDemoData(List<DateTime> dateRange, List<AR_Application> resultData)
        {
            List<int> dailyDemoData = new List<int>();

            foreach (DateTime date in dateRange)
            {
                var used_context = resultData
                    .Where(app => app.Date.Year == date.Year &&
                                  app.Date.Month == date.Month &&
                                  app.Date.Day == date.Day &&
                                  app.Condition_Id == 4)
                    .Count();

                dailyDemoData.Add(used_context);
            }

            return dailyDemoData;
        }

        private async Task<List<int>> GetTotalNtuData(List<DateTime> dateRange, List<AR_Application> resultData)
        {
            List<int> dailyNtuData = new List<int>();

            foreach (DateTime date in dateRange)
            {
                var used_context = resultData
                    .Where(app => app.Date.Year == date.Year &&
                                  app.Date.Month == date.Month &&
                                  app.Date.Day == date.Day &&
                                  app.Condition_Id == 2)
                    .Count();

                dailyNtuData.Add(used_context);
            }

            return dailyNtuData;
        }

        ///---------------------------------------------------------------------------------------------------------------------------------------\\\
        ///--- Daily Applications and NTU as per date range			END																			---\\\
        ///---------------------------------------------------------------------------------------------------------------------------------------\\\

        public IActionResult Privacy()
        {
            return View();
        }

        [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
        public IActionResult Error()
        {
            return View(new ErrorViewModel { RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier });
        }
    }
}